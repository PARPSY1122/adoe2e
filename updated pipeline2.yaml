# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:
  vmImageName: 'ubuntu-latest'
  subscription: 'serviceconnection01'
  ACR: 'ACR132.azurecr.io'
  SQLserver: 'nextopssqls02.database.windows.net'
  DatabaseName: 'nextopssql01'
  SQLuser: 'sqladmin'
  SQLpassword: 'Password@123'

stages:
- stage: Build
  displayName: Build Stage
  jobs:
  - job: Build
    displayName:  Build
    pool:
      vmImage: '$(vmImageName)'
    steps:
    - task: replacetokens@5
      inputs:
        rootDirectory: '$(build.sourcesdirectory)/src/MyHealth.Web'
        targetFiles: 'appsettings.json'
        encoding: 'auto'
        tokenPattern: 'default'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        enableRecursion: false
        useLegacyPattern: false
        enableTelemetry: true
        
   
    - task: replacetokens@5
      inputs:
        rootDirectory: '$(build.sourcesdirectory)'
        targetFiles: 'mhc-aks.yaml'
        encoding: 'auto'
        tokenPattern: 'rm'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        enableRecursion: false
        useLegacyPattern: false
        enableTelemetry: true
   
    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Pay-As-You-Go(c9c172cf-1387-4a85-8e1e-0abffb7628d9)'
        azureContainerRegistry: '{"loginServer":"acr132.azurecr.io", "id" : "/subscriptions/c9c172cf-1387-4a85-8e1e-0abffb7628d9/resourceGroups/NextOps/providers/Microsoft.ContainerRegistry/registries/ACR132"}'
        dockerComposeFile: 'docker-compose.ci.build.yml'
        action: 'Run services'
        detached: false
    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Pay-As-You-Go(c9c172cf-1387-4a85-8e1e-0abffb7628d9)'
        azureContainerRegistry: '{"loginServer":"acr132.azurecr.io", "id" : "/subscriptions/c9c172cf-1387-4a85-8e1e-0abffb7628d9/resourceGroups/NextOps/providers/Microsoft.ContainerRegistry/registries/ACR132"}'
        dockerComposeFile: 'docker-compose.yml'
        dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
        action: 'Build services'
    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Pay-As-You-Go(c9c172cf-1387-4a85-8e1e-0abffb7628d9)'
        azureContainerRegistry: '{"loginServer":"acr132.azurecr.io", "id" : "/subscriptions/c9c172cf-1387-4a85-8e1e-0abffb7628d9/resourceGroups/NextOps/providers/Microsoft.ContainerRegistry/registries/ACR132"}'
        dockerComposeFile: 'docker-compose.yml'
        dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
        action: 'Push services'
    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Pay-As-You-Go(c9c172cf-1387-4a85-8e1e-0abffb7628d9)'
        azureContainerRegistry: '{"loginServer":"acr132.azurecr.io", "id" : "/subscriptions/c9c172cf-1387-4a85-8e1e-0abffb7628d9/resourceGroups/NextOps/providers/Microsoft.ContainerRegistry/registries/ACR132"}'
        dockerComposeFile: 'docker-compose.yml'
        dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
        action: 'Lock services'
        outputDockerComposeFile: '$(Build.StagingDirectory)/docker-compose.yml'
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: |
          **/mhc-aks.yaml
          **/*.dacpac
        TargetFolder: '$(build.artifactstagingdirectory)'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        ArtifactName: deploy

- stage: DB
  displayName : DB Stage
  dependsOn: Build
  condition: succeeded('build')

  jobs: 
    - deployment: DB
      displayName: 'DB Deployment'
      environment: 'development'
      pool:
        vmImage: 'windows-2019'
        stratagy: 
              runOnce:
                deploy:
                  steps:
                    - task: SqlAzureDacpacDeployment@1
                      inputs:
                        azureSubscription: 'Pay-As-You-Go(1)(c9c172cf-1387-4a85-8e1e-0abffb7628d9)'
                        AuthenticationType: 'server'
                        ServerName: '$(SQLserver)'
                        DatabaseName: '$(DatabaseName)'
                        SqlUsername: '$(SQLuser)'
                        SqlPassword: '$(SQLpassword)'
                        deployType: 'DacpacTask'
                        DeploymentAction: 'Publish'
                        DacpacFile: '$(Agent.BuildDirectory)/**/*.dacpac'
                        IpDetectionMethod: 'AutoDetect'
- stage: Deploy
  displayName: AKS Stage
  dependsOn: DB
  condition: succeeded('DB')
  jobs:
    - deployment: AKS
      displayName: 'AKS Deployment'
      environment: 'dev'
      pool:
        vmImage: '$(vmImageName)'
      strategy:
       runOnce:
         deploy:
          steps:
          - task: Kubernetes@1
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: 'Pay-As-You-Go(c9c172cf-1387-4a85-8e1e-0abffb7628d9)'
              azureResourceGroup: 'ACR132'
              kubernetesCluster: 'NextOpsAKS01'
              command: 'apply'
              useConfigurationFile: true
              configuration: '$(pipeline.workspace)/drop/mhc-aks.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              azureSubscriptionEndpointForSecrets: 'Pay-As-You-Go(c9c172cf-1387-4a85-8e1e-0abffb7628d9)'
              azureContainerRegistry: 'acr132.azurecr.io'
              secretName: 'acrs'

          - task: Kubernetes@1
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: 'Pay-As-You-Go(c9c172cf-1387-4a85-8e1e-0abffb7628d9)'
              azureResourceGroup: 'ACR132'
              kubernetesCluster: 'NextOpsAKS01'
              command: 'set'
              useConfigurationFile: true
              configuration: '$(pipeline.workspace)/drop/mhc-aks.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              azureSubscriptionEndpointForSecrets: 'Pay-As-You-Go(c9c172cf-1387-4a85-8e1e-0abffb7628d9)'
              azureContainerRegistry: 'acr132.azurecr.io'
              secretName: 'acrs'

                    
